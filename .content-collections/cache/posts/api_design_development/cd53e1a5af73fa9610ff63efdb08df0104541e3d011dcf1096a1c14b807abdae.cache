"var Component=(()=>{var p=Object.create;var i=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var w=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),y=(r,e)=>{for(var s in e)i(r,s,{get:e[s],enumerable:!0})},o=(r,e,s,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of m(e))!f.call(r,t)&&t!==s&&i(r,t,{get:()=>e[t],enumerable:!(a=h(e,t))||a.enumerable});return r};var v=(r,e,s)=>(s=r!=null?p(g(r)):{},o(e||!r||!r.__esModule?i(s,\"default\",{value:r,enumerable:!0}):s,r)),A=r=>o(i({},\"__esModule\",{value:!0}),r);var l=w((P,c)=>{c.exports=_jsx_runtime});var I={};y(I,{default:()=>u});var n=v(l());function d(r){let e={code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",h4:\"h4\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...r.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{children:\"The Complete Guide to API Design and Development\"}),`\n`,(0,n.jsx)(e.p,{children:\"APIs (Application Programming Interfaces) are the backbone of modern web applications, enabling different systems to communicate and share data effectively. This comprehensive guide covers everything you need to know about designing and building robust, scalable APIs.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"API Design Principles\"}),`\n`,(0,n.jsx)(e.h3,{children:\"RESTful Design\"}),`\n`,(0,n.jsx)(e.p,{children:\"REST (Representational State Transfer) is the most common architectural style for web APIs. Following RESTful principles ensures your API is intuitive and predictable.\"}),`\n`,(0,n.jsx)(e.h4,{children:\"Core REST Principles:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Stateless\"}),\": Each request contains all necessary information\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Uniform Interface\"}),\": Consistent resource identification and manipulation\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Client-Server\"}),\": Clear separation of concerns\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Cacheable\"}),\": Responses should be cacheable when appropriate\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Layered System\"}),\": Architecture can be composed of hierarchical layers\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{children:\"HTTP Methods and Their Usage:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javascript\",children:`// GET - Retrieve data\nGET /api/users          // Get all users\nGET /api/users/123      // Get specific user\n\n// POST - Create new resource\nPOST /api/users         // Create new user\n\n// PUT - Update entire resource\nPUT /api/users/123      // Update user completely\n\n// PATCH - Partial update\nPATCH /api/users/123    // Update specific user fields\n\n// DELETE - Remove resource\nDELETE /api/users/123   // Delete user\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Resource Naming Conventions\"}),`\n`,(0,n.jsx)(e.p,{children:\"Consistent naming makes your API intuitive:\"}),`\n`,(0,n.jsx)(e.h4,{children:\"Best Practices:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Use nouns, not verbs: \",(0,n.jsx)(e.code,{children:\"/users\"}),\" not \",(0,n.jsx)(e.code,{children:\"/getUsers\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Use plural nouns: \",(0,n.jsx)(e.code,{children:\"/users\"}),\" not \",(0,n.jsx)(e.code,{children:\"/user\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Use lowercase: \",(0,n.jsx)(e.code,{children:\"/users\"}),\" not \",(0,n.jsx)(e.code,{children:\"/Users\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Use hyphens for multi-word resources: \",(0,n.jsx)(e.code,{children:\"/user-profiles\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Nest resources logically: \",(0,n.jsx)(e.code,{children:\"/users/123/orders\"})]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"API Documentation\"}),`\n`,(0,n.jsx)(e.h3,{children:\"OpenAPI Specification\"}),`\n`,(0,n.jsx)(e.p,{children:\"Document your API using OpenAPI (formerly Swagger) for clear, interactive documentation:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`openapi: 3.0.0\ninfo:\n  title: E-commerce API\n  version: 1.0.0\n  description: API for managing e-commerce operations\n\npaths:\n  /users:\n    get:\n      summary: Get all users\n      parameters:\n        - name: page\n          in: query\n          schema:\n            type: integer\n            default: 1\n        - name: limit\n          in: query\n          schema:\n            type: integer\n            default: 10\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  users:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/User'\n                  pagination:\n                    $ref: '#/components/schemas/Pagination'\n\ncomponents:\n  schemas:\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n        email:\n          type: string\n          format: email\n        name:\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Authentication and Authorization\"}),`\n`,(0,n.jsx)(e.h3,{children:\"JWT (JSON Web Tokens)\"}),`\n`,(0,n.jsx)(e.p,{children:\"Implement secure authentication using JWT:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javascript\",children:`const jwt = require('jsonwebtoken');\nconst bcrypt = require('bcrypt');\n\n// Login endpoint\napp.post('/api/auth/login', async (req, res) => {\n  try {\n    const { email, password } = req.body;\n    \n    // Find user\n    const user = await User.findOne({ email });\n    if (!user) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n    \n    // Verify password\n    const isValidPassword = await bcrypt.compare(password, user.password);\n    if (!isValidPassword) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n    \n    // Generate JWT\n    const token = jwt.sign(\n      { userId: user.id, email: user.email },\n      process.env.JWT_SECRET,\n      { expiresIn: '24h' }\n    );\n    \n    res.json({ token, user: { id: user.id, email: user.email, name: user.name } });\n  } catch (error) {\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Authentication middleware\nconst authenticateToken = (req, res, next) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n  \n  if (!token) {\n    return res.status(401).json({ error: 'Access token required' });\n  }\n  \n  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {\n    if (err) {\n      return res.status(403).json({ error: 'Invalid token' });\n    }\n    req.user = user;\n    next();\n  });\n};\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Role-Based Access Control (RBAC)\"}),`\n`,(0,n.jsx)(e.p,{children:\"Implement authorization with role-based permissions:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javascript\",children:`// Authorization middleware\nconst authorize = (roles = []) => {\n  return async (req, res, next) => {\n    try {\n      const user = await User.findById(req.user.userId).populate('role');\n      \n      if (!user) {\n        return res.status(401).json({ error: 'User not found' });\n      }\n      \n      if (roles.length && !roles.includes(user.role.name)) {\n        return res.status(403).json({ error: 'Insufficient permissions' });\n      }\n      \n      req.user.role = user.role;\n      next();\n    } catch (error) {\n      res.status(500).json({ error: 'Authorization error' });\n    }\n  };\n};\n\n// Usage\napp.get('/api/admin/users', authenticateToken, authorize(['admin']), getUsersHandler);\napp.delete('/api/users/:id', authenticateToken, authorize(['admin', 'moderator']), deleteUserHandler);\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Error Handling\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Consistent Error Responses\"}),`\n`,(0,n.jsx)(e.p,{children:\"Implement standardized error handling:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javascript\",children:`// Error response structure\nclass APIError extends Error {\n  constructor(message, statusCode = 500, code = null) {\n    super(message);\n    this.statusCode = statusCode;\n    this.code = code;\n    this.isOperational = true;\n  }\n}\n\n// Error handling middleware\nconst errorHandler = (err, req, res, next) => {\n  let error = { ...err };\n  error.message = err.message;\n\n  // Log error\n  console.error(err);\n\n  // Mongoose bad ObjectId\n  if (err.name === 'CastError') {\n    const message = 'Resource not found';\n    error = new APIError(message, 404, 'RESOURCE_NOT_FOUND');\n  }\n\n  // Mongoose duplicate key\n  if (err.code === 11000) {\n    const message = 'Duplicate field value entered';\n    error = new APIError(message, 400, 'DUPLICATE_FIELD');\n  }\n\n  // Mongoose validation error\n  if (err.name === 'ValidationError') {\n    const message = Object.values(err.errors).map(val => val.message);\n    error = new APIError(message, 400, 'VALIDATION_ERROR');\n  }\n\n  res.status(error.statusCode || 500).json({\n    success: false,\n    error: {\n      message: error.message || 'Server Error',\n      code: error.code,\n      ...(process.env.NODE_ENV === 'development' && { stack: err.stack })\n    }\n  });\n};\n\n// Usage\napp.use(errorHandler);\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Input Validation\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Request Validation with Joi\"}),`\n`,(0,n.jsx)(e.p,{children:\"Validate incoming requests to ensure data integrity:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javascript\",children:`const Joi = require('joi');\n\n// Validation schemas\nconst userSchema = Joi.object({\n  name: Joi.string().min(2).max(50).required(),\n  email: Joi.string().email().required(),\n  password: Joi.string().min(8).pattern(new RegExp('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\\\$%\\\\^&\\\\*])')).required(),\n  age: Joi.number().integer().min(18).max(120)\n});\n\n// Validation middleware\nconst validate = (schema) => {\n  return (req, res, next) => {\n    const { error } = schema.validate(req.body);\n    if (error) {\n      const message = error.details.map(detail => detail.message).join(', ');\n      return res.status(400).json({\n        success: false,\n        error: {\n          message,\n          code: 'VALIDATION_ERROR'\n        }\n      });\n    }\n    next();\n  };\n};\n\n// Usage\napp.post('/api/users', validate(userSchema), createUserHandler);\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Rate Limiting\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Implement Rate Limiting\"}),`\n`,(0,n.jsx)(e.p,{children:\"Protect your API from abuse with rate limiting:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javascript\",children:`const rateLimit = require('express-rate-limit');\nconst RedisStore = require('rate-limit-redis');\nconst redis = require('redis');\n\nconst redisClient = redis.createClient();\n\n// General rate limiting\nconst generalLimiter = rateLimit({\n  store: new RedisStore({\n    client: redisClient,\n    prefix: 'rl:general:'\n  }),\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: {\n    error: 'Too many requests, please try again later'\n  },\n  standardHeaders: true,\n  legacyHeaders: false\n});\n\n// Strict rate limiting for auth endpoints\nconst authLimiter = rateLimit({\n  store: new RedisStore({\n    client: redisClient,\n    prefix: 'rl:auth:'\n  }),\n  windowMs: 15 * 60 * 1000,\n  max: 5, // limit each IP to 5 requests per windowMs\n  message: {\n    error: 'Too many authentication attempts, please try again later'\n  }\n});\n\n// Apply rate limiting\napp.use('/api/', generalLimiter);\napp.use('/api/auth/', authLimiter);\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Caching Strategies\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Redis Caching\"}),`\n`,(0,n.jsx)(e.p,{children:\"Implement caching to improve API performance:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javascript\",children:`const redis = require('redis');\nconst client = redis.createClient();\n\n// Cache middleware\nconst cache = (duration = 300) => {\n  return async (req, res, next) => {\n    const key = \\`cache:\\${req.originalUrl}\\`;\n    \n    try {\n      const cached = await client.get(key);\n      if (cached) {\n        return res.json(JSON.parse(cached));\n      }\n      \n      // Store original res.json\n      const originalJson = res.json;\n      \n      // Override res.json to cache the response\n      res.json = function(data) {\n        client.setex(key, duration, JSON.stringify(data));\n        originalJson.call(this, data);\n      };\n      \n      next();\n    } catch (error) {\n      next();\n    }\n  };\n};\n\n// Usage\napp.get('/api/products', cache(600), getProductsHandler); // Cache for 10 minutes\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"API Versioning\"}),`\n`,(0,n.jsx)(e.h3,{children:\"URL Versioning\"}),`\n`,(0,n.jsx)(e.p,{children:\"Implement API versioning for backward compatibility:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javascript\",children:`// Version 1 routes\napp.use('/api/v1/users', v1UserRoutes);\napp.use('/api/v1/products', v1ProductRoutes);\n\n// Version 2 routes\napp.use('/api/v2/users', v2UserRoutes);\napp.use('/api/v2/products', v2ProductRoutes);\n\n// Version-specific middleware\nconst apiVersion = (version) => {\n  return (req, res, next) => {\n    req.apiVersion = version;\n    next();\n  };\n};\n\n// Usage in route handlers\nconst getUsersHandler = async (req, res) => {\n  if (req.apiVersion === 'v1') {\n    // V1 logic\n    const users = await User.find().select('id name email');\n    res.json({ users });\n  } else if (req.apiVersion === 'v2') {\n    // V2 logic with additional fields\n    const users = await User.find().select('id name email createdAt lastLogin');\n    res.json({ \n      users,\n      meta: {\n        total: users.length,\n        version: 'v2'\n      }\n    });\n  }\n};\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Testing APIs\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Unit and Integration Testing\"}),`\n`,(0,n.jsx)(e.p,{children:\"Implement comprehensive testing for your APIs:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javascript\",children:`const request = require('supertest');\nconst app = require('../app');\n\ndescribe('User API', () => {\n  let authToken;\n  \n  beforeAll(async () => {\n    // Setup test database\n    await setupTestDB();\n    \n    // Create test user and get auth token\n    const response = await request(app)\n      .post('/api/auth/login')\n      .send({\n        email: 'test@example.com',\n        password: 'testpassword'\n      });\n    \n    authToken = response.body.token;\n  });\n  \n  afterAll(async () => {\n    await cleanupTestDB();\n  });\n  \n  describe('GET /api/users', () => {\n    it('should return users list for authenticated user', async () => {\n      const response = await request(app)\n        .get('/api/users')\n        .set('Authorization', \\`Bearer \\${authToken}\\`)\n        .expect(200);\n      \n      expect(response.body).toHaveProperty('users');\n      expect(Array.isArray(response.body.users)).toBe(true);\n    });\n    \n    it('should return 401 for unauthenticated request', async () => {\n      await request(app)\n        .get('/api/users')\n        .expect(401);\n    });\n  });\n  \n  describe('POST /api/users', () => {\n    it('should create new user with valid data', async () => {\n      const userData = {\n        name: 'John Doe',\n        email: 'john@example.com',\n        password: 'SecurePass123!'\n      };\n      \n      const response = await request(app)\n        .post('/api/users')\n        .set('Authorization', \\`Bearer \\${authToken}\\`)\n        .send(userData)\n        .expect(201);\n      \n      expect(response.body.user).toHaveProperty('id');\n      expect(response.body.user.email).toBe(userData.email);\n    });\n    \n    it('should return validation error for invalid data', async () => {\n      const invalidData = {\n        name: 'J',\n        email: 'invalid-email',\n        password: '123'\n      };\n      \n      await request(app)\n        .post('/api/users')\n        .set('Authorization', \\`Bearer \\${authToken}\\`)\n        .send(invalidData)\n        .expect(400);\n    });\n  });\n});\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Monitoring and Logging\"}),`\n`,(0,n.jsx)(e.h3,{children:\"API Monitoring\"}),`\n`,(0,n.jsx)(e.p,{children:\"Implement comprehensive monitoring for your APIs:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javascript\",children:`const winston = require('winston');\nconst morgan = require('morgan');\n\n// Configure logger\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  transports: [\n    new winston.transports.File({ filename: 'error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'combined.log' }),\n    new winston.transports.Console({\n      format: winston.format.simple()\n    })\n  ]\n});\n\n// Request logging middleware\napp.use(morgan('combined', {\n  stream: {\n    write: (message) => logger.info(message.trim())\n  }\n}));\n\n// Performance monitoring middleware\nconst performanceMonitor = (req, res, next) => {\n  const start = Date.now();\n  \n  res.on('finish', () => {\n    const duration = Date.now() - start;\n    \n    logger.info('API Request', {\n      method: req.method,\n      url: req.url,\n      statusCode: res.statusCode,\n      duration,\n      userAgent: req.get('User-Agent'),\n      ip: req.ip\n    });\n    \n    // Alert on slow requests\n    if (duration > 1000) {\n      logger.warn('Slow API Request', {\n        method: req.method,\n        url: req.url,\n        duration\n      });\n    }\n  });\n  \n  next();\n};\n\napp.use(performanceMonitor);\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Conclusion\"}),`\n`,(0,n.jsx)(e.p,{children:\"Building robust APIs requires attention to design principles, security, performance, and maintainability. By following RESTful conventions, implementing proper authentication and authorization, handling errors gracefully, and maintaining comprehensive documentation and testing, you can create APIs that are both powerful and easy to use.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Remember that API design is about creating interfaces that are intuitive for developers while being robust enough to handle real-world usage patterns. Focus on consistency, security, and performance, and always consider the developer experience when making design decisions.\"}),`\n`,(0,n.jsx)(e.p,{children:\"The key to successful API development is to start with solid foundations and continuously iterate based on user feedback and changing requirements. A well-designed API becomes a valuable asset that can power multiple applications and integrations over time.\"})]})}function u(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,{...r,children:(0,n.jsx)(d,{...r})}):d(r)}return A(I);})();\n;return Component;"